//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/command/NdefType2Command.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/ControlTlv.h"
#include "com/st/st25sdk/Helper.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/command/NdefType2Command.h"
#include "com/st/st25sdk/command/Type2Command.h"
#include "com/st/st25sdk/ndef/NDEFMsg.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/util/List.h"

@implementation ComStSt25sdkCommandNdefType2Command

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader {
  ComStSt25sdkCommandNdefType2Command_initWithComStSt25sdkRFReaderInterface_(self, reader);
  return self;
}

- (void)writeNdefMessageWithInt:(jint)byteAddress
    withComStSt25sdkNdefNDEFMsg:(ComStSt25sdkNdefNDEFMsg *)msg {
  IOSByteArray *formatedBuffer;
  @try {
    formatedBuffer = [((ComStSt25sdkNdefNDEFMsg *) nil_chk(msg)) formatType2];
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_NDEF_DATA));
  }
  IOSByteArray *zeroLengthValueBuffer = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x00 } count:1];
  IOSByteArray *lengthValueBuffer = [IOSByteArray newArrayWithLength:1];
  IOSByteArray *formatedBufferWithoutLength;
  if (((IOSByteArray *) nil_chk(formatedBuffer))->size_ < [self getWriteDataSize]) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  [self writeBytesWithInt:byteAddress + 1 withByteArray:zeroLengthValueBuffer];
  formatedBufferWithoutLength = [IOSByteArray newArrayWithLength:formatedBuffer->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(formatedBuffer, 0, formatedBufferWithoutLength, 0, formatedBuffer->size_);
  *IOSByteArray_GetRef(formatedBufferWithoutLength, 1) = (jint) 0x00;
  [self writeBytesWithInt:byteAddress withByteArray:formatedBufferWithoutLength];
  *IOSByteArray_GetRef(lengthValueBuffer, 0) = IOSByteArray_Get(formatedBuffer, 1);
  [self writeBytesWithInt:byteAddress + 1 withByteArray:lengthValueBuffer];
}

- (void)writeNdefMessageWithInt:(jint)ndefStartAddress
    withComStSt25sdkNdefNDEFMsg:(ComStSt25sdkNdefNDEFMsg *)msg
               withJavaUtilList:(id<JavaUtilList>)tlvListToJump {
  IOSByteArray *formatedBuffer;
  @try {
    formatedBuffer = [((ComStSt25sdkNdefNDEFMsg *) nil_chk(msg)) formatType2];
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_NDEF_DATA));
  }
  IOSByteArray *zeroLengthValueBuffer = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x00 } count:1];
  IOSByteArray *lengthValueBuffer = [IOSByteArray newArrayWithLength:1];
  IOSByteArray *formatedBufferWithoutLength;
  if (((IOSByteArray *) nil_chk(formatedBuffer))->size_ < [self getWriteDataSize]) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  [self writeBytesWithInt:ndefStartAddress + 1 withByteArray:zeroLengthValueBuffer];
  formatedBufferWithoutLength = [IOSByteArray newArrayWithLength:formatedBuffer->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(formatedBuffer, 0, formatedBufferWithoutLength, 0, formatedBuffer->size_);
  *IOSByteArray_GetRef(formatedBufferWithoutLength, 1) = (jint) 0x00;
  if (tlvListToJump == nil) {
    [self writeBytesWithInt:ndefStartAddress withByteArray:formatedBufferWithoutLength];
  }
  else {
    jint writeAddress = ndefStartAddress;
    jint numberOfBytesToWrite = formatedBuffer->size_;
    jint bytesToWrite = 0;
    jint writtenBytes = 0;
    jint listIndex = 0;
    do {
      if (listIndex < [tlvListToJump size]) {
        if (writeAddress < IOSIntArray_Get(nil_chk([tlvListToJump getWithInt:listIndex]), 0)) {
          if (writeAddress + numberOfBytesToWrite <= IOSIntArray_Get(nil_chk([tlvListToJump getWithInt:listIndex]), 0)) {
            bytesToWrite = numberOfBytesToWrite;
          }
          else {
            bytesToWrite = IOSIntArray_Get(nil_chk([tlvListToJump getWithInt:listIndex]), 0) - writeAddress;
          }
          IOSByteArray *msgTemp = [IOSByteArray newArrayWithLength:bytesToWrite];
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(formatedBufferWithoutLength, writtenBytes, msgTemp, 0, bytesToWrite);
          [self writeBytesWithInt:writeAddress withByteArray:msgTemp];
          writtenBytes += bytesToWrite;
          numberOfBytesToWrite -= bytesToWrite;
          writeAddress += bytesToWrite + IOSIntArray_Get(nil_chk([tlvListToJump getWithInt:listIndex]), 1);
        }
      }
      else {
        bytesToWrite = numberOfBytesToWrite;
        IOSByteArray *msgTemp = [IOSByteArray newArrayWithLength:bytesToWrite];
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(formatedBufferWithoutLength, writtenBytes, msgTemp, 0, bytesToWrite);
        [self writeBytesWithInt:writeAddress withByteArray:msgTemp];
        writtenBytes += bytesToWrite;
        numberOfBytesToWrite -= bytesToWrite;
      }
      listIndex++;
    }
    while (numberOfBytesToWrite > 0);
  }
  *IOSByteArray_GetRef(lengthValueBuffer, 0) = IOSByteArray_Get(formatedBuffer, 1);
  [self writeBytesWithInt:ndefStartAddress + 1 withByteArray:lengthValueBuffer];
}

- (ComStSt25sdkNdefNDEFMsg *)readNdefMessageWithInt:(jint)ndefStartAddress {
  IOSByteArray *dataArea;
  IOSByteArray *msg;
  jint sizeInBytes;
  dataArea = [self readBytesWithInt:ndefStartAddress withInt:4];
  if (((IOSByteArray *) nil_chk(dataArea))->size_ != 4) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA));
  }
  if (IOSByteArray_Get(dataArea, 0) != ComStSt25sdkControlTlv_NDEF_MESSAGE_TLV) {
    return nil;
  }
  if (IOSByteArray_Get(dataArea, 1) == (jbyte) (jint) 0xFF) {
    sizeInBytes = ((JreLShift32(IOSByteArray_Get(dataArea, 2), 8)) & (jint) 0xFF00) + (IOSByteArray_Get(dataArea, 3) & (jint) 0xFF);
    ndefStartAddress += 4;
  }
  else {
    sizeInBytes = ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(IOSByteArray_Get(dataArea, 1));
    ndefStartAddress += 2;
  }
  msg = [self readBytesWithInt:ndefStartAddress withInt:sizeInBytes];
  ComStSt25sdkNdefNDEFMsg *ndefmsg;
  @try {
    ndefmsg = new_ComStSt25sdkNdefNDEFMsg_initWithByteArray_(msg);
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_NDEF_DATA));
  }
  return ndefmsg;
}

- (ComStSt25sdkNdefNDEFMsg *)readNdefMessageWithInt:(jint)ndefTlvStartAddress
                                   withJavaUtilList:(id<JavaUtilList>)tlvListToJump {
  jint ndefStartAddress;
  IOSByteArray *dataArea;
  jint sizeInBytes;
  dataArea = [self readBytesWithInt:ndefTlvStartAddress withInt:5];
  if (((IOSByteArray *) nil_chk(dataArea))->size_ != 5) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA));
  }
  if (IOSByteArray_Get(dataArea, 0) != ComStSt25sdkControlTlv_NDEF_MESSAGE_TLV) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_NDEF_DATA));
  }
  if (IOSByteArray_Get(dataArea, 1) == (jbyte) (jint) 0xFF) {
    sizeInBytes = ((JreLShift32(IOSByteArray_Get(dataArea, 2), 8)) & (jint) 0xFF00) + (IOSByteArray_Get(dataArea, 3) & (jint) 0xFF);
    ndefStartAddress = ndefTlvStartAddress + 4;
  }
  else {
    sizeInBytes = ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(IOSByteArray_Get(dataArea, 1));
    ndefStartAddress = ndefTlvStartAddress + 2;
  }
  IOSByteArray *msg = [IOSByteArray newArrayWithLength:sizeInBytes];
  if (tlvListToJump == nil) {
    msg = [self readBytesWithInt:ndefStartAddress withInt:sizeInBytes];
  }
  else {
    jint readAddress = ndefStartAddress;
    jint numberOfBytesToRead = sizeInBytes;
    jint bytesToRead = 0;
    jint readBytes = 0;
    jint listIndex = 0;
    do {
      if (listIndex < [tlvListToJump size]) {
        if (readAddress < IOSIntArray_Get(nil_chk([tlvListToJump getWithInt:listIndex]), 0)) {
          if (readAddress + numberOfBytesToRead <= IOSIntArray_Get(nil_chk([tlvListToJump getWithInt:listIndex]), 0)) {
            bytesToRead = numberOfBytesToRead;
          }
          else {
            bytesToRead = IOSIntArray_Get(nil_chk([tlvListToJump getWithInt:listIndex]), 0) - readAddress;
          }
          IOSByteArray *msgTemp = [self readBytesWithInt:readAddress withInt:bytesToRead];
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(msgTemp, 0, msg, readBytes, ((IOSByteArray *) nil_chk(msgTemp))->size_);
          readBytes += bytesToRead;
          numberOfBytesToRead -= bytesToRead;
          readAddress += bytesToRead + IOSIntArray_Get(nil_chk([tlvListToJump getWithInt:listIndex]), 1);
        }
      }
      else {
        bytesToRead = numberOfBytesToRead;
        IOSByteArray *msgTemp = [self readBytesWithInt:readAddress withInt:bytesToRead];
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(msgTemp, 0, msg, readBytes, ((IOSByteArray *) nil_chk(msgTemp))->size_);
        readBytes += bytesToRead;
        numberOfBytesToRead -= bytesToRead;
      }
      listIndex++;
    }
    while (numberOfBytesToRead > 0);
  }
  ComStSt25sdkNdefNDEFMsg *ndefmsg;
  @try {
    ndefmsg = new_ComStSt25sdkNdefNDEFMsg_initWithByteArray_(msg);
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_NDEF_DATA));
  }
  return ndefmsg;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 4, 3, 5, -1, -1 },
    { NULL, "LComStSt25sdkNdefNDEFMsg;", 0x1, 6, 7, 3, -1, -1, -1 },
    { NULL, "LComStSt25sdkNdefNDEFMsg;", 0x1, 6, 8, 3, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkRFReaderInterface:);
  methods[1].selector = @selector(writeNdefMessageWithInt:withComStSt25sdkNdefNDEFMsg:);
  methods[2].selector = @selector(writeNdefMessageWithInt:withComStSt25sdkNdefNDEFMsg:withJavaUtilList:);
  methods[3].selector = @selector(readNdefMessageWithInt:);
  methods[4].selector = @selector(readNdefMessageWithInt:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComStSt25sdkRFReaderInterface;", "writeNdefMessage", "ILComStSt25sdkNdefNDEFMsg;", "LComStSt25sdkSTException;", "ILComStSt25sdkNdefNDEFMsg;LJavaUtilList;", "(ILcom/st/st25sdk/ndef/NDEFMsg;Ljava/util/List<[I>;)V", "readNdefMessage", "I", "ILJavaUtilList;", "(ILjava/util/List<[I>;)Lcom/st/st25sdk/ndef/NDEFMsg;" };
  static const J2ObjcClassInfo _ComStSt25sdkCommandNdefType2Command = { "NdefType2Command", "com.st.st25sdk.command", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkCommandNdefType2Command;
}

@end

void ComStSt25sdkCommandNdefType2Command_initWithComStSt25sdkRFReaderInterface_(ComStSt25sdkCommandNdefType2Command *self, id<ComStSt25sdkRFReaderInterface> reader) {
  ComStSt25sdkCommandType2Command_initWithComStSt25sdkRFReaderInterface_(self, reader);
}

ComStSt25sdkCommandNdefType2Command *new_ComStSt25sdkCommandNdefType2Command_initWithComStSt25sdkRFReaderInterface_(id<ComStSt25sdkRFReaderInterface> reader) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandNdefType2Command, initWithComStSt25sdkRFReaderInterface_, reader)
}

ComStSt25sdkCommandNdefType2Command *create_ComStSt25sdkCommandNdefType2Command_initWithComStSt25sdkRFReaderInterface_(id<ComStSt25sdkRFReaderInterface> reader) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandNdefType2Command, initWithComStSt25sdkRFReaderInterface_, reader)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkCommandNdefType2Command)
